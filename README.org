* –ü–∏—Å–∞—Ç—å –∏–≥—Ä—ã –Ω–∞ Lisp ‚Äì –∫–∞–π—Ñ–æ–≤–æ!
** –û–± –∞–≤—Ç–æ—Ä–µ
[[file:img/author.jpg]]

*–ê–Ω–¥—Ä–µ–π –ö—Ä–∞–≤—á—É–∫*

+ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –∞–≤—Ç–æ—Ä –∫—É—Ä—Å–æ–≤ –≤ Otus
+ UNIX-–≥–∏–∫ –∏ Lisp-—Ñ–∞–Ω–∞—Ç–∏–∫ üòÖ
+ –ü–∏—Å–∞–ª –Ω–∞ Common Lisp –∑–∞ –¥–µ–Ω—å–≥–∏
+ –í —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ—Ç —Ä–∞–±–æ—Ç—ã –≤—Ä–µ–º—è –¥–µ–ª–∞—é –Ω–∞ –Ω—ë–º –≤–∏–¥–µ–æ–∏–≥—Ä—ã

** –ú–æ–π –ø—É—Ç—å –≤ –≥–µ–π–º–¥–µ–≤–µ –Ω–∞ Lisp
*** 2018. SICP
[[https://github.com/lockie/sicp-exercises][sicp-exercises]]

[[file:img/sicp.jpg]]

*** 2019. Spring Lisp Game Jam '19
[[https://awkravchuk.itch.io/darkness-looming][Darkness Looming]] (Racket, SDL2)
#15/17

[[file:img/dl.png]]

*** 2019. racket-sdl2
[[https://github.com/lockie/racket-sdl2][racket-sdl2]]

[[file:img/racket-sdl2.png]]

*** 2019. GMTK Game Jam '19
[[https://awkravchuk.itch.io/backpackless][Backpackless]] (Fennel, L√ñVE2D)
#885/2553

[[file:img/backpackless.png]]

*** 2019. d2clone-kit
[[https://gitlab.com/lockie/d2clone-kit][d2clone-kit]] (Common Lisp, liballegro)

[[file:img/d2clone.png]]

*** 2020. Spring Lisp Game Jam '20
[[https://awkravchuk.itch.io/darkness-looming-the-dawn][Darkness Looming: The Dawn]]
#6/21

[[file:img/dl-dawn.png]]

*** 2020. Twitch
[[https://twitch.tv/awkravchuk][twitch.tv/awkravchuk]]

[[file:img/stream.png]]

*** 2020. GMTK Game Jam '20
[[https://awkravchuk.itch.io/magegement][Magegement]] (Fennel, Amulet)
#3119/5268

[[file:img/magegement.png]]

*** 2021. docker-lisp-gamedev
[[https://gitlab.com/lockie/docker-lisp-gamedev][docker-lisp-gamedev]]

*** 2023. cl-fast-ecs
[[https://gitlab.com/lockie/cl-fast-ecs][cl-fast-ecs]] (Common Lisp)

[[file:img/cl-fast-ecs.png]]

*** 2023. Spring Lisp Game Jam '23
[[https://awkravchuk.itch.io/thoughtbound][Thoughtbound]] (Common Lisp, liballegro)
#13/29

[[file:img/thoughtbound.png]]

*** 2023. Autumn Lisp Game Jam '23
[[https://awkravchuk.itch.io/mana-break][Mana Break]] (Common Lisp, liballegro)
#6/16

[[file:img/mana-break.png]]

*** 2024. Spring Lisp Game Jam '24
[[https://awkravchuk.itch.io/cycle-of-evil][Cycle of Evil]] (Common Lisp, liballegro)
#26/48

[[file:img/cycle-of-evil.png]]

** –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
+ Diablo 2 üòä
+ Quake
+ Shinmera's [[https://kandria.com][Kandria]] & [[https://github.com/Shirakumo/trial][Trial game engine]]

[[file:img/kandria.png]]

** –ü–æ—á–µ–º—É Common Lisp?
[[file:img/logo.png]]

[[https://habr.com/ru/articles/737316][–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–¥–∏–Ω–∞–º–∏—á–Ω–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏]]

+ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  + –∫–æ–º–ø–∏–ª—è—Ü–∏—è –≤ –Ω–∞—Ç–∏–≤–Ω—ã–π –∫–æ–¥
  + —Ñ—É–Ω–∫—Ü–∏—è ~disassemble~
  + –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ ~declare~
  + –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
+ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å
  + [[https://github.com/cffi/cffi][CFFI]]
  + –Ω–µ–≥–∏–≥–∏–µ–Ω–∏—á–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã
+ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏
  + –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ([[https://github.com/cbaggers/livesupport][livesupport]])
  + –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

** –ü–æ—á–µ–º—É liballegro?
+ –Ω–∞—á–∞–ª —Å SDL2
+ GUI: [[https://github.com/Immediate-Mode-UI/Nuklear][Nuklear]]
+ SDL2-–±—ç–∫–µ–Ω–¥ Nuklear [[https://github.com/Immediate-Mode-UI/Nuklear/blob/1e4eacca2e3e4abd4d8b793c580c71f2e5315651/demo/sdl_opengl2/nuklear_sdl_gl2.h#L66][–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª]] "—Å—ã—Ä—ãe" OpenGL –≤—ã–∑–æ–≤—ã
+ [[https://stackoverflow.com/a/41091998/1336774][–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ]] –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ API SDL2 –≤—Ä–æ–¥–µ =SDL_RenderCopy= –∏ —Å—ã—Ä–æ–π OpenGL
+ –ë—ç–∫–µ–Ω–¥—ã Nuklear: SDL2, SFML, [[https://liballeg.org][liballegro]]
+ Common Lisp-–±–∏–Ω–¥–∏–Ω–≥: [[https://github.com/resttime/cl-liballegro][cl-liballegro]]
+ [[https://gitlab.com/lockie/cl-liballegro-nuklear][cl-liballegro-nuklear]]
+ –ê –¥–≤–∞ –≥–æ–¥–∞ —Å–ø—É—Å—Ç—è [[https://github.com/Immediate-Mode-UI/Nuklear/tree/master/demo/sdl_renderer][–ø–æ—è–≤–∏–ª—Å—è]] –±—ç–∫—ç–Ω–¥ Nuklear —Å –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º–∏ API SDL2 üòÖ

** –° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?
+ [[https://lispgames.github.io][Lisp Games Wiki]]
+ [[https://github.com/lockie/cookiecutter-lisp-game][cookiecutter-lisp-game]]
+ [[https://mapeditor.org][Tiled]] & [[https://github.com/Zulu-Inuoe/cl-tiled][cl-tiled]]
+ [[https://aseprite.org][Aseprite]] & [[https://gitlab.com/lockie/cl-aseprite][cl-aseprite]]
+ [[https://habr.com/ru/articles/767342][–ì–µ–π–º–¥–µ–≤ –Ω–∞ Lisp. –ß–∞—Å—Ç—å 1: ECS –∏ –º–µ—Ç–∞–ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è]]

** –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω Entity-Component-System
[[https://youtu.be/rX0ItVEVjHc][Data-oriented design]]

+ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∫–æ–¥–∞
+ –≥–∏–±–∫–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤
+ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ —Å—á—ë—Ç —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–µ–π CPU

** –ö—ç—à–∏ CPU
[[file:img/cpu-mem-gap.png]]
–ò—Å—Ç–æ—á–Ω–∏–∫: [[https://aras-p.info/texts/files/2018Academy%20-%20ECS-DoD.pdf][Aras Pranckeviƒçius, Entity Component Systems & Data Oriented Design]]

** SoA
Array of structures ‚ü∂ Structure of arrays

#+begin_src lisp
  (defstruct pos
    (x 0.0 :type single-float)
    (y 0.0 :type single-float))

  (setf positions (make-array 100 :element-type 'pos))

  (loop :with sum-x := 0.0
        :with sum-y := 0.0
        :for entity :from 0 :below 100
        :for p := (aref positions entity)
        :for x := (pos-x p)
        :for y := (pos-y p)
        :do ;; something with x & y
        (incf sum-x x)
        (incf sum-y y))
#+end_src

[[file:img/aos.png]]
–ò—Å—Ç–æ—á–Ω–∏–∫: [[https://github.com/SanderMertens/flecs_not_for_dummies][Sander Mertens, Flecs (not for dummies)]]

#+begin_src lisp
  (defstruct positions
    (x (make-array 100 :element-type 'single-float))
    (y (make-array 100 :element-type 'single-float)))

  (setf positions (make-positions))

  (loop :with sum-x := 0
        :with sum-y := 0
        :with xs := (positions-x positions)
        :with ys := (positions-y positions)
        :for entity :from 0 :below 100
        :for x := (aref xs entity)
        :for y := (aref ys entity)
        :do ;; something with x & y
        (incf sum-x x)
        (incf sum-y y))
#+end_src

[[file:img/soa.png]]
–ò—Å—Ç–æ—á–Ω–∏–∫: [[https://github.com/SanderMertens/flecs_not_for_dummies][Sander Mertens, Flecs (not for dummies)]]

** ECS

[[file:img/ecs.png]]
–ò—Å—Ç–æ—á–Ω–∏–∫: [[https://habr.com/ru/companies/pixonic/articles/413729][–ö–∞–∫ –∏ –ø–æ—á–µ–º—É –º—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–≤–æ–π ECS]]

** ECS: –ø—Ä–∏–º–µ—Ä
[[file:img/entities.png]]

** cl-fast-ecs
[[https://awkravchuk.itch.io/cl-fast-ecs][Blazingly fast Entity-Component-System microframework ‚ö°üì¶]]

#+begin_src lisp :results output :session demo
  (declaim (optimize (speed 3) (debug 0) (safety 0) (compilation-speed 0)))

  (ql:quickload :cl-fast-ecs)

  (ecs:defcomponent position
    "Location information"
    (x 0.0 :type single-float :documentation "X coordinate")
    (y 0.0 :type single-float :documentation "Y coordinate"))

  (ecs:defcomponent velocity
    (x 0.0 :type single-float)
    (y 0.0 :type single-float))

  (ecs:defsystem move
    (:components-ro (velocity)
     :components-rw (position))
    "Moves objects according to their velocity."
    (incf position-x velocity-x)
    (incf position-y velocity-y))

  (ecs:defsystem print
    (:components-ro (position))
    (format t "entity ~a: (~a, ~a)~%" entity position-x position-y))

  (ecs:bind-storage)

  (let ((entity0 (ecs:make-entity)))
    (make-position entity0 :x 0.0 :y 0.0)
    (make-velocity entity0 :x 0.5 :y 0.5)
    (ecs:make-object '((:position :x 1.0 :y 1.0)
                       (:velocity :x 0.1 :y 0.1)))
    (dotimes (i 3)
      (ecs:run-systems)))
#+end_src

#+RESULTS:
#+begin_example
To load "cl-fast-ecs":
  Load 1 ASDF system:
    cl-fast-ecs
; Loading "cl-fast-ecs"

entity 0: (0.0, 0.0)
entity 1: (1.0, 1.0)
entity 0: (0.5, 0.5)
entity 1: (1.1, 1.1)
entity 0: (1.0, 1.0)
entity 1: (1.2, 1.2)
#+end_example

** ECS: –ø—Ä–∏–º–µ—Ä
#+begin_src lisp
  (ecs:defsystem render-map-tiles
    (:components-ro (position size image map-tile)
     :initially (al:hold-bitmap-drawing t)
     :finally (al:hold-bitmap-drawing nil))
    (al:draw-scaled-bitmap image-bitmap
                           0.0 0.0
                           size-width size-height
                           position-x position-y
                           (* +scale-factor+ size-width)
                           (* +scale-factor+ size-height)
                           0))
#+end_src

#+begin_src lisp
  (ecs:defsystem update-sprites
    (:components-ro (animation-sequence)
     :components-rw (animation-state)
     :arguments ((:dt single-float)))
    (incf animation-state-time dt)
    (when (> animation-state-time animation-sequence-frame-duration)
      (multiple-value-bind (nframes rest-time)
          (floor animation-state-time animation-sequence-frame-duration)
        (declare (type non-negative-fixnum nframes))
        (setf animation-state-time rest-time)
        (multiple-value-bind (repeat frame)
            (truncate (+ animation-state-frame nframes) animation-sequence-frames)
          (setf animation-state-frame (cond
                                        ((zerop repeat)
                                         frame)
                                        ((zerop animation-sequence-repeat)
                                         (setf animation-state-finished 1)
                                         (1- animation-sequence-frames))
                                        (t
                                         frame)))))))
#+end_src

** –ú–µ—Ç–∞–ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è
#+begin_src lisp :results output :session demo
  (print
   (macroexpand-1
    '(ecs:defcomponent position
      "Location information"
      (x 0.0 :type single-float :documentation "X coordinate")
      (y 0.0 :type single-float :documentation "Y coordinate"))))
#+end_src

#+RESULTS:
#+begin_example

(PROGN
 (EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
   (PROGN
    (DECLAIM
     (FTYPE (FUNCTION (POSITION-SOA205 ALEXANDRIA:ARRAY-LENGTH))
      %ADJUST-POSITION-SOA))
    (DEFSTRUCT
        (POSITION-SOA205 (:CONC-NAME %POSITION-SOA-)
         (:CONSTRUCTOR %MAKE-POSITION-SOA*) (:COPIER NIL) (:PREDICATE NIL)
         (:INCLUDE CL-FAST-ECS::COMPONENT-SOA))
      "Location information"
      (X
       (MAKE-ARRAY 0 :INITIAL-ELEMENT
                   (LET* ((X 0.0) (Y 0.0))
                     (DECLARE (IGNORABLE X Y))
                     X)
                   :ELEMENT-TYPE 'SINGLE-FLOAT)
       :TYPE (SIMPLE-ARRAY SINGLE-FLOAT (*)))
      (Y
       (MAKE-ARRAY 0 :INITIAL-ELEMENT
                   (LET* ((X 0.0) (Y 0.0))
                     (DECLARE (IGNORABLE X Y))
                     Y)
                   :ELEMENT-TYPE 'SINGLE-FLOAT)
       :TYPE (SIMPLE-ARRAY SINGLE-FLOAT (*))))
    (DEFUN %MAKE-POSITION-SOA
           (CL-FAST-ECS::ENTITIES-ALLOCATED CL-FAST-ECS::OLD-COMPONENT-STORAGE)
      (COND
       (CL-FAST-ECS::OLD-COMPONENT-STORAGE
        (LET* ((CL-FAST-ECS::ALLOCATED
                (CL-FAST-ECS::COMPONENT-SOA-ALLOCATED
                 CL-FAST-ECS::OLD-COMPONENT-STORAGE))
               (CL-FAST-ECS::OLD-SLOTS
                (CL-FAST-ECS::COMPONENT-SOA-SLOTS
                 CL-FAST-ECS::OLD-COMPONENT-STORAGE))
               (CL-FAST-ECS::SOA
                (%MAKE-POSITION-SOA* :ALLOCATED CL-FAST-ECS::ALLOCATED :EXISTS
                                     (CL-FAST-ECS::COMPONENT-SOA-EXISTS
                                      CL-FAST-ECS::OLD-COMPONENT-STORAGE)
                                     :MIN-ENTITY
                                     (CL-FAST-ECS::COMPONENT-SOA-MIN-ENTITY
                                      CL-FAST-ECS::OLD-COMPONENT-STORAGE)
                                     :MAX-ENTITY
                                     (CL-FAST-ECS::COMPONENT-SOA-MAX-ENTITY
                                      CL-FAST-ECS::OLD-COMPONENT-STORAGE)
                                     :COUNT
                                     (CL-FAST-ECS::COMPONENT-SOA-COUNT
                                      CL-FAST-ECS::OLD-COMPONENT-STORAGE)
                                     :X
                                     (LET ((CL-FAST-ECS::OLD-SLOT
                                            (GETHASH :X
                                                     CL-FAST-ECS::OLD-SLOTS)))
                                       (IF (AND CL-FAST-ECS::OLD-SLOT
                                                (EQ 'SINGLE-FLOAT
                                                    (ARRAY-ELEMENT-TYPE
                                                     CL-FAST-ECS::OLD-SLOT)))
                                           CL-FAST-ECS::OLD-SLOT
                                           (MAKE-ARRAY CL-FAST-ECS::ALLOCATED
                                                       :INITIAL-ELEMENT
                                                       (LET* ((X 0.0) (Y 0.0))
                                                         (DECLARE
                                                          (IGNORABLE X Y))
                                                         X)
                                                       :ELEMENT-TYPE
                                                       'SINGLE-FLOAT)))
                                     :Y
                                     (LET ((CL-FAST-ECS::OLD-SLOT
                                            (GETHASH :Y
                                                     CL-FAST-ECS::OLD-SLOTS)))
                                       (IF (AND CL-FAST-ECS::OLD-SLOT
                                                (EQ 'SINGLE-FLOAT
                                                    (ARRAY-ELEMENT-TYPE
                                                     CL-FAST-ECS::OLD-SLOT)))
                                           CL-FAST-ECS::OLD-SLOT
                                           (MAKE-ARRAY CL-FAST-ECS::ALLOCATED
                                                       :INITIAL-ELEMENT
                                                       (LET* ((X 0.0) (Y 0.0))
                                                         (DECLARE
                                                          (IGNORABLE X Y))
                                                         Y)
                                                       :ELEMENT-TYPE
                                                       'SINGLE-FLOAT)))))
               (CL-FAST-ECS::SLOTS
                (CL-FAST-ECS::COMPONENT-SOA-SLOTS CL-FAST-ECS::SOA)))
          (DECLARE (IGNORABLE CL-FAST-ECS::OLD-SLOTS CL-FAST-ECS::SLOTS))
          (SETF (GETHASH :X CL-FAST-ECS::SLOTS)
                  (%POSITION-SOA-X CL-FAST-ECS::SOA)
                (GETHASH :Y CL-FAST-ECS::SLOTS)
                  (%POSITION-SOA-Y CL-FAST-ECS::SOA))
          CL-FAST-ECS::SOA))
       (T
        (LET* ((CL-FAST-ECS::SOA
                (%MAKE-POSITION-SOA* :EXISTS
                                     (MAKE-ARRAY
                                      CL-FAST-ECS::ENTITIES-ALLOCATED
                                      :ELEMENT-TYPE 'BIT :INITIAL-ELEMENT 0)))
               (CL-FAST-ECS::SLOTS
                (CL-FAST-ECS::COMPONENT-SOA-SLOTS CL-FAST-ECS::SOA)))
          (DECLARE (IGNORABLE CL-FAST-ECS::SLOTS))
          (SETF (GETHASH :X CL-FAST-ECS::SLOTS)
                  (%POSITION-SOA-X CL-FAST-ECS::SOA)
                (GETHASH :Y CL-FAST-ECS::SLOTS)
                  (%POSITION-SOA-Y CL-FAST-ECS::SOA))
          CL-FAST-ECS::SOA))))
    (LET* ((X 0.0) (Y 0.0))
      (DEFUN %ADJUST-POSITION-SOA (CL-FAST-ECS::SOA CL-FAST-ECS::NEW-SIZE)
        (DECLARE (OPTIMIZE (SAFETY 0)))
        (SETF (%POSITION-SOA-X CL-FAST-ECS::SOA)
                (CL-FAST-ECS::ADJUST-ARRAY*
                  (%POSITION-SOA-X CL-FAST-ECS::SOA)
                  CL-FAST-ECS::NEW-SIZE
                  :ELEMENT-TYPE
                  'SINGLE-FLOAT
                  :INITIAL-ELEMENT
                  X))
        (SETF (%POSITION-SOA-Y CL-FAST-ECS::SOA)
                (CL-FAST-ECS::ADJUST-ARRAY*
                  (%POSITION-SOA-Y CL-FAST-ECS::SOA)
                  CL-FAST-ECS::NEW-SIZE
                  :ELEMENT-TYPE
                  'SINGLE-FLOAT
                  :INITIAL-ELEMENT
                  Y))
        (LET ((CL-FAST-ECS::SLOTS
               (CL-FAST-ECS::COMPONENT-SOA-SLOTS CL-FAST-ECS::SOA)))
          (DECLARE (IGNORABLE CL-FAST-ECS::SLOTS))
          (SETF (GETHASH :X CL-FAST-ECS::SLOTS)
                  (%POSITION-SOA-X CL-FAST-ECS::SOA)
                (GETHASH :Y CL-FAST-ECS::SLOTS)
                  (%POSITION-SOA-Y CL-FAST-ECS::SOA)))
        (SETF (CL-FAST-ECS::COMPONENT-SOA-ALLOCATED CL-FAST-ECS::SOA)
                CL-FAST-ECS::NEW-SIZE)))
    NIL)
   (UNLESS (BOUNDP 'CL-FAST-ECS::+POSITION-COMPONENT-INDEX+)
     (DECLAIM
      (TYPE ALEXANDRIA:ARRAY-INDEX CL-FAST-ECS::+POSITION-COMPONENT-INDEX+))
     (DEFCONSTANT CL-FAST-ECS::+POSITION-COMPONENT-INDEX+
       CL-FAST-ECS::*COMPONENT-REGISTRY-LENGTH*)
     (INCF CL-FAST-ECS::*COMPONENT-REGISTRY-LENGTH*))
   (SETF (GETF CL-FAST-ECS::*COMPONENT-REGISTRY* :POSITION)
           #'%MAKE-POSITION-SOA))
 (CL-FAST-ECS::RUN-HOOK
  (IF (BOUNDP 'CL-FAST-ECS::+POSITION-COMPONENT-INDEX+)
      CL-FAST-ECS:*COMPONENT-REDEFINED-HOOK*
      CL-FAST-ECS:*COMPONENT-DEFINED-HOOK*)
  CL-FAST-ECS::+POSITION-COMPONENT-INDEX+ #'%MAKE-POSITION-SOA)
 (DECLAIM (INLINE POSITION-X (SETF POSITION-X))
          (FTYPE (FUNCTION (CL-FAST-ECS:ENTITY) SINGLE-FLOAT) POSITION-X)
          (FTYPE (FUNCTION (SINGLE-FLOAT CL-FAST-ECS:ENTITY) SINGLE-FLOAT)
           (SETF POSITION-X)))
 (DEFUN POSITION-X (CL-FAST-ECS:ENTITY)
   "X coordinate"
   (LET* ((CL-FAST-ECS::COMPONENT-STORAGES
           (CL-FAST-ECS::STORAGE-COMPONENT-STORAGES CL-FAST-ECS:*STORAGE*))
          (CL-FAST-ECS::SOA
           (SVREF CL-FAST-ECS::COMPONENT-STORAGES
                  CL-FAST-ECS::+POSITION-COMPONENT-INDEX+)))
     (AREF (THE (SIMPLE-ARRAY SINGLE-FLOAT) (%POSITION-SOA-X CL-FAST-ECS::SOA))
           CL-FAST-ECS:ENTITY)))
 (DEFUN (SETF POSITION-X) (CL-FAST-ECS::VALUE CL-FAST-ECS:ENTITY)
   "X coordinate"
   (LET* ((CL-FAST-ECS::COMPONENT-STORAGES
           (CL-FAST-ECS::STORAGE-COMPONENT-STORAGES CL-FAST-ECS:*STORAGE*))
          (CL-FAST-ECS::SOA
           (SVREF CL-FAST-ECS::COMPONENT-STORAGES
                  CL-FAST-ECS::+POSITION-COMPONENT-INDEX+))
          (CL-FAST-ECS::DATA
           (THE (SIMPLE-ARRAY SINGLE-FLOAT)
                (%POSITION-SOA-X CL-FAST-ECS::SOA))))
     NIL
     NIL
     (SETF (AREF CL-FAST-ECS::DATA CL-FAST-ECS:ENTITY) CL-FAST-ECS::VALUE)))
 (DECLAIM (INLINE POSITION-Y (SETF POSITION-Y))
          (FTYPE (FUNCTION (CL-FAST-ECS:ENTITY) SINGLE-FLOAT) POSITION-Y)
          (FTYPE (FUNCTION (SINGLE-FLOAT CL-FAST-ECS:ENTITY) SINGLE-FLOAT)
           (SETF POSITION-Y)))
 (DEFUN POSITION-Y (CL-FAST-ECS:ENTITY)
   "Y coordinate"
   (LET* ((CL-FAST-ECS::COMPONENT-STORAGES
           (CL-FAST-ECS::STORAGE-COMPONENT-STORAGES CL-FAST-ECS:*STORAGE*))
          (CL-FAST-ECS::SOA
           (SVREF CL-FAST-ECS::COMPONENT-STORAGES
                  CL-FAST-ECS::+POSITION-COMPONENT-INDEX+)))
     (AREF (THE (SIMPLE-ARRAY SINGLE-FLOAT) (%POSITION-SOA-Y CL-FAST-ECS::SOA))
           CL-FAST-ECS:ENTITY)))
 (DEFUN (SETF POSITION-Y) (CL-FAST-ECS::VALUE CL-FAST-ECS:ENTITY)
   "Y coordinate"
   (LET* ((CL-FAST-ECS::COMPONENT-STORAGES
           (CL-FAST-ECS::STORAGE-COMPONENT-STORAGES CL-FAST-ECS:*STORAGE*))
          (CL-FAST-ECS::SOA
           (SVREF CL-FAST-ECS::COMPONENT-STORAGES
                  CL-FAST-ECS::+POSITION-COMPONENT-INDEX+))
          (CL-FAST-ECS::DATA
           (THE (SIMPLE-ARRAY SINGLE-FLOAT)
                (%POSITION-SOA-Y CL-FAST-ECS::SOA))))
     NIL
     NIL
     (SETF (AREF CL-FAST-ECS::DATA CL-FAST-ECS:ENTITY) CL-FAST-ECS::VALUE)))
 (DECLAIM
  (FTYPE
   (FUNCTION (CL-FAST-ECS:ENTITY &KEY (:X SINGLE-FLOAT) (:Y SINGLE-FLOAT)))
   MAKE-POSITION))
 (DEFUN MAKE-POSITION (CL-FAST-ECS:ENTITY &KEY (X 0.0) (Y 0.0))
   "Add component with given values to an entity."
   (CL-FAST-ECS::MAYBE-CHECK-ENTITY
     CL-FAST-ECS:ENTITY)
   (LET* ((CL-FAST-ECS::COMPONENT-STORAGES
           (CL-FAST-ECS::STORAGE-COMPONENT-STORAGES CL-FAST-ECS:*STORAGE*))
          (CL-FAST-ECS::SOA
           (SVREF CL-FAST-ECS::COMPONENT-STORAGES
                  CL-FAST-ECS::+POSITION-COMPONENT-INDEX+)))
     (IF (ZEROP
          (SBIT (CL-FAST-ECS::COMPONENT-SOA-EXISTS CL-FAST-ECS::SOA)
                CL-FAST-ECS:ENTITY))
         (BLOCK CL-FAST-ECS::NEW
           (WHEN
               (>= CL-FAST-ECS:ENTITY
                   (CL-FAST-ECS::COMPONENT-SOA-ALLOCATED CL-FAST-ECS::SOA))
             (LET ((CL-FAST-ECS::NEW-SIZE
                    (CL-FAST-ECS::NEW-CAPACITY (1+ CL-FAST-ECS:ENTITY))))
               (%ADJUST-POSITION-SOA CL-FAST-ECS::SOA CL-FAST-ECS::NEW-SIZE)
               (CL-FAST-ECS::RUN-HOOK
                CL-FAST-ECS:*COMPONENT-STORAGE-GROWN-HOOK*
                CL-FAST-ECS::+POSITION-COMPONENT-INDEX+
                CL-FAST-ECS::NEW-SIZE)))
           (INCF (CL-FAST-ECS::COMPONENT-SOA-COUNT CL-FAST-ECS::SOA))
           NIL
           (WHEN
               (< CL-FAST-ECS:ENTITY
                  (CL-FAST-ECS::COMPONENT-SOA-MIN-ENTITY CL-FAST-ECS::SOA))
             (SETF (CL-FAST-ECS::COMPONENT-SOA-MIN-ENTITY CL-FAST-ECS::SOA)
                     CL-FAST-ECS:ENTITY))
           (WHEN
               (> CL-FAST-ECS:ENTITY
                  (CL-FAST-ECS::COMPONENT-SOA-MAX-ENTITY CL-FAST-ECS::SOA))
             (SETF (CL-FAST-ECS::COMPONENT-SOA-MAX-ENTITY CL-FAST-ECS::SOA)
                     CL-FAST-ECS:ENTITY))
           (SETF (SBIT (CL-FAST-ECS::COMPONENT-SOA-EXISTS CL-FAST-ECS::SOA)
                       CL-FAST-ECS:ENTITY)
                   1
                 (SBIT
                  (CL-FAST-ECS::STORAGE-COMPONENT-CREATED-BITS
                   CL-FAST-ECS:*STORAGE*)
                  CL-FAST-ECS::+POSITION-COMPONENT-INDEX+)
                   1))
         (BLOCK CL-FAST-ECS::EXISTS))
     (SETF (AREF
            (THE (SIMPLE-ARRAY SINGLE-FLOAT)
                 (%POSITION-SOA-X CL-FAST-ECS::SOA))
            CL-FAST-ECS:ENTITY)
             X
           (AREF
            (THE (SIMPLE-ARRAY SINGLE-FLOAT)
                 (%POSITION-SOA-Y CL-FAST-ECS::SOA))
            CL-FAST-ECS:ENTITY)
             Y))
   NIL)
 (DEFMETHOD CL-FAST-ECS:MAKE-COMPONENT
            ((CL-FAST-ECS::INDEX (EQL CL-FAST-ECS::+POSITION-COMPONENT-INDEX+))
             CL-FAST-ECS:ENTITY
             &REST CL-FAST-ECS::ARGS
             &KEY (X 0.0) (Y 0.0))
   (DECLARE (IGNORABLE X Y))
   (APPLY #'MAKE-POSITION CL-FAST-ECS:ENTITY CL-FAST-ECS::ARGS))
 (DECLAIM (FTYPE (FUNCTION (CL-FAST-ECS:ENTITY) BOOLEAN) HAS-POSITION-P))
 (DEFUN HAS-POSITION-P (CL-FAST-ECS:ENTITY)
   (CL-FAST-ECS::MAYBE-CHECK-ENTITY
     CL-FAST-ECS:ENTITY)
   (LET* ((CL-FAST-ECS::COMPONENT-STORAGES
           (CL-FAST-ECS::STORAGE-COMPONENT-STORAGES CL-FAST-ECS:*STORAGE*))
          (CL-FAST-ECS::SOA
           (SVREF CL-FAST-ECS::COMPONENT-STORAGES
                  CL-FAST-ECS::+POSITION-COMPONENT-INDEX+)))
     (NOT
      (ZEROP
       (SBIT (CL-FAST-ECS::COMPONENT-SOA-EXISTS CL-FAST-ECS::SOA)
             CL-FAST-ECS:ENTITY)))))
 (DECLAIM (FTYPE (FUNCTION (CL-FAST-ECS:ENTITY)) DELETE-POSITION))
 (LET* ((X 0.0) (Y 0.0))
   (DECLARE (IGNORABLE X Y))
   (DEFUN DELETE-POSITION (CL-FAST-ECS:ENTITY)
     (CL-FAST-ECS::MAYBE-CHECK-ENTITY
       CL-FAST-ECS:ENTITY)
     (LET* ((CL-FAST-ECS::COMPONENT-STORAGES
             (CL-FAST-ECS::STORAGE-COMPONENT-STORAGES CL-FAST-ECS:*STORAGE*))
            (CL-FAST-ECS::SOA
             (SVREF CL-FAST-ECS::COMPONENT-STORAGES
                    CL-FAST-ECS::+POSITION-COMPONENT-INDEX+)))
       NIL
       NIL
       (DECF (CL-FAST-ECS::COMPONENT-SOA-COUNT CL-FAST-ECS::SOA))
       (SETF (SBIT (CL-FAST-ECS::COMPONENT-SOA-EXISTS CL-FAST-ECS::SOA)
                   CL-FAST-ECS:ENTITY)
               0
             (SBIT
              (CL-FAST-ECS::STORAGE-COMPONENT-REMOVED-BITS
               CL-FAST-ECS:*STORAGE*)
              CL-FAST-ECS::+POSITION-COMPONENT-INDEX+)
               1))
     NIL))
 (DEFMETHOD CL-FAST-ECS:DELETE-COMPONENT
            ((CL-FAST-ECS::INDEX (EQL CL-FAST-ECS::+POSITION-COMPONENT-INDEX+))
             CL-FAST-ECS:ENTITY)
   (FUNCALL #'DELETE-POSITION CL-FAST-ECS:ENTITY))
 (DEFMACRO %WITH-POSITION-SLOTS
           (CL-FAST-ECS::BINDINGS CL-FAST-ECS::READONLY
            CL-FAST-ECS::COMPONENT-STORAGES CL-FAST-ECS:ENTITY
            &BODY CL-FAST-ECS::BODY)
   (ALEXANDRIA:WITH-GENSYMS (CL-FAST-ECS::SOA)
     (LET* ((CL-FAST-ECS::SOA-SLOT-BINDINGS
             (MAPCAR
              #'(LAMBDA (CL-FAST-ECS::N CL-FAST-ECS::S TYPE)
                  `(,CL-FAST-ECS::N
                    (THE (SIMPLE-ARRAY ,TYPE)
                         (,(ALEXANDRIA:SYMBOLICATE :% 'POSITION :-SOA-
                                                   CL-FAST-ECS::S)
                          ,CL-FAST-ECS::SOA))))
              '(#:X721 #:Y722) '(X Y) '(SINGLE-FLOAT SINGLE-FLOAT)))
            (CL-FAST-ECS::ACCESSOR-NAMES
             (MAPCAR
              #'(LAMBDA (CL-FAST-ECS::S)
                  (GENTEMP (FORMAT NIL "%~a" CL-FAST-ECS::S)))
              '(X Y)))
            (CL-FAST-ECS::SETTER-NAMES
             (MAPCAR #'(LAMBDA (CL-FAST-ECS::N) `(SETF ,CL-FAST-ECS::N))
                     CL-FAST-ECS::ACCESSOR-NAMES))
            (CL-FAST-ECS::ACCESSOR-BINDINGS
             (MAPCAN
              #'(LAMBDA
                    (CL-FAST-ECS::N CL-FAST-ECS::S CL-FAST-ECS::SLOT TYPE
                     CL-FAST-ECS::I CL-FAST-ECS::U)
                  `((,CL-FAST-ECS::N (CL-FAST-ECS:ENTITY)
                     (AREF ,CL-FAST-ECS::S CL-FAST-ECS:ENTITY))
                    ,@(WHEN T
                        `(((SETF ,CL-FAST-ECS::N)
                           (CL-FAST-ECS::V CL-FAST-ECS:ENTITY)
                           (DECLARE
                            (IGNORABLE CL-FAST-ECS::V CL-FAST-ECS:ENTITY)
                            (TYPE ,TYPE CL-FAST-ECS::V))
                           ,(IF CL-FAST-ECS::READONLY
                                `(ERROR "~a slot ~a is readonly" ','POSITION
                                        ',CL-FAST-ECS::SLOT)
                                `(PROGN
                                  ,(CL-FAST-ECS::%UPDATE-INDEX 'POSITION
                                                               CL-FAST-ECS::SLOT
                                                               CL-FAST-ECS::SOA
                                                               CL-FAST-ECS::S
                                                               'CL-FAST-ECS::V
                                                               CL-FAST-ECS::I
                                                               CL-FAST-ECS::U)
                                  ,(CL-FAST-ECS::%UPDATE-COMPOSITE-INDEX
                                    'POSITION CL-FAST-ECS::SLOT
                                    CL-FAST-ECS::SOA 'CL-FAST-ECS::V '(X Y)
                                    '(SINGLE-FLOAT SINGLE-FLOAT) 'NIL 'NIL NIL)
                                  (SETF (AREF ,CL-FAST-ECS::S
                                              CL-FAST-ECS:ENTITY)
                                          CL-FAST-ECS::V))))))))
              CL-FAST-ECS::ACCESSOR-NAMES '(#:X721 #:Y722) '(X Y)
              '(SINGLE-FLOAT SINGLE-FLOAT) '(NIL NIL) '(NIL NIL)))
            (CL-FAST-ECS::BINDING-NAMES
             (OR CL-FAST-ECS::BINDINGS
                 (MAPCAR
                  #'(LAMBDA (CL-FAST-ECS::N)
                      (ALEXANDRIA:SYMBOLICATE 'POSITION :- CL-FAST-ECS::N))
                  '(X Y))))
            (CL-FAST-ECS::SLOT-BINDINGS
             (MAPCAR
              #'(LAMBDA (CL-FAST-ECS::N CL-FAST-ECS::A)
                  `(,CL-FAST-ECS::N (,CL-FAST-ECS::A ,CL-FAST-ECS:ENTITY)))
              CL-FAST-ECS::BINDING-NAMES CL-FAST-ECS::ACCESSOR-NAMES)))
       `(LET* ((,CL-FAST-ECS::SOA
                (SVREF ,CL-FAST-ECS::COMPONENT-STORAGES
                       ,'CL-FAST-ECS::+POSITION-COMPONENT-INDEX+))
               ,@CL-FAST-ECS::SOA-SLOT-BINDINGS)
          (DECLARE (IGNORABLE ,CL-FAST-ECS::SOA ,@(QUOTE (#:X721 #:Y722)))
                   (MUFFLE-CONDITIONS CODE-DELETION-NOTE))
          (FLET (,@CL-FAST-ECS::ACCESSOR-BINDINGS)
            (DECLARE
             (INLINE ,@CL-FAST-ECS::ACCESSOR-NAMES
              ,@(UNLESS CL-FAST-ECS::READONLY CL-FAST-ECS::SETTER-NAMES))
             (UNMUFFLE-CONDITIONS CODE-DELETION-NOTE))
            (SYMBOL-MACROLET (,@CL-FAST-ECS::SLOT-BINDINGS)
              ,@(IF NIL
                    `((HANDLER-CASE (PROGN ,@CL-FAST-ECS::BODY)
                                    (UNDEFINED-FUNCTION (CL-FAST-ECS::U)
                                     (LET ((CL-FAST-ECS::F
                                            (CELL-ERROR-NAME CL-FAST-ECS::U)))
                                       (IF (AND
                                            (EQ (FIRST CL-FAST-ECS::F) 'SETF)
                                            (FIND (SECOND CL-FAST-ECS::F)
                                                  ',CL-FAST-ECS::BINDING-NAMES
                                                  :TEST #'EQ))
                                           (ERROR "~a slot ~a is readonly"
                                                  ','POSITION
                                                  (SECOND CL-FAST-ECS::F))
                                           (ERROR CL-FAST-ECS::U))))))
                    CL-FAST-ECS::BODY)))))))
 (DEFMACRO WITH-POSITION
           (CL-FAST-ECS::BINDINGS CL-FAST-ECS:ENTITY &BODY CL-FAST-ECS::BODY)
   "A convenience macro to access entity's component data.
Prefer DEFSYSTEM to access the component data though."
   (ALEXANDRIA:WITH-GENSYMS (CL-FAST-ECS::ENTITY-VAR)
     (LET ((CL-FAST-ECS::INTERNAL-MACRO '%WITH-POSITION-SLOTS)
           (CL-FAST-ECS::SLOT-NAMES '(X Y)))
       `(PROGN
         (LET ((,CL-FAST-ECS::ENTITY-VAR ,CL-FAST-ECS:ENTITY))
           (DECLARE (IGNORABLE ,CL-FAST-ECS::ENTITY-VAR))
           (CL-FAST-ECS::MAYBE-CHECK-ENTITY
             ,CL-FAST-ECS::ENTITY-VAR)
           (,CL-FAST-ECS::INTERNAL-MACRO
            ,(OR CL-FAST-ECS::BINDINGS CL-FAST-ECS::SLOT-NAMES) NIL
            (CL-FAST-ECS::STORAGE-COMPONENT-STORAGES CL-FAST-ECS:*STORAGE*)
            ,CL-FAST-ECS::ENTITY-VAR ,@CL-FAST-ECS::BODY))))))
 (DEFUN ASSIGN-POSITION
        (CL-FAST-ECS:ENTITY
         &REST CL-FAST-ECS::ARGS
         &KEY (X 0.0 X-SUPPLIED-P) (Y 0.0 Y-SUPPLIED-P))
   "Creates or updates the component."
   (CL-FAST-ECS::MAYBE-CHECK-ENTITY
     CL-FAST-ECS:ENTITY)
   (LET* ((CL-FAST-ECS::COMPONENT-STORAGES
           (CL-FAST-ECS::STORAGE-COMPONENT-STORAGES CL-FAST-ECS:*STORAGE*))
          (CL-FAST-ECS::SOA
           (SVREF CL-FAST-ECS::COMPONENT-STORAGES
                  CL-FAST-ECS::+POSITION-COMPONENT-INDEX+)))
     (DECLARE (IGNORABLE CL-FAST-ECS::SOA))
     (IF (ZEROP
          (SBIT (CL-FAST-ECS::COMPONENT-SOA-EXISTS CL-FAST-ECS::SOA)
                CL-FAST-ECS:ENTITY))
         (APPLY #'MAKE-POSITION CL-FAST-ECS:ENTITY CL-FAST-ECS::ARGS)
         (%WITH-POSITION-SLOTS
           (#:X723 #:Y724)
           NIL
           CL-FAST-ECS::COMPONENT-STORAGES
           CL-FAST-ECS:ENTITY
           (WHEN X-SUPPLIED-P (SETF #:X723 X))
           (WHEN Y-SUPPLIED-P (SETF #:Y724 Y))
           NIL))))
 (DEFUN REPLACE-POSITION (CL-FAST-ECS::DST-ENTITY CL-FAST-ECS::SRC-ENTITY)
   (DECLARE (IGNORABLE CL-FAST-ECS::SRC-ENTITY))
   (CL-FAST-ECS::MAYBE-CHECK-ENTITY
     CL-FAST-ECS::DEST-ENTITY)
   (CL-FAST-ECS::MAYBE-CHECK-ENTITY
     CL-FAST-ECS::SRC-ENTITY)
   (%WITH-POSITION-SLOTS
     (X Y)
     T
     (CL-FAST-ECS::STORAGE-COMPONENT-STORAGES CL-FAST-ECS:*STORAGE*)
     CL-FAST-ECS::SRC-ENTITY
     (ASSIGN-POSITION CL-FAST-ECS::DST-ENTITY :X X :Y Y))
   CL-FAST-ECS::DST-ENTITY)
 (DEFMETHOD CL-FAST-ECS:PRINT-COMPONENT
            ((CL-FAST-ECS::INDEX (EQL CL-FAST-ECS::+POSITION-COMPONENT-INDEX+))
             CL-FAST-ECS:ENTITY
             &OPTIONAL (STREAM *STANDARD-OUTPUT*))
   (CL-FAST-ECS::MAYBE-CHECK-ENTITY
     CL-FAST-ECS:ENTITY)
   (LET* ((CL-FAST-ECS::COMPONENT-STORAGES
           (CL-FAST-ECS::STORAGE-COMPONENT-STORAGES CL-FAST-ECS:*STORAGE*))
          (CL-FAST-ECS::SOA
           (SVREF CL-FAST-ECS::COMPONENT-STORAGES
                  CL-FAST-ECS::+POSITION-COMPONENT-INDEX+)))
     (DECLARE (IGNORABLE CL-FAST-ECS::SOA))
     (PRIN1
      (LIST :POSITION :X
            (AREF
             (THE (SIMPLE-ARRAY SINGLE-FLOAT)
                  (%POSITION-SOA-X CL-FAST-ECS::SOA))
             CL-FAST-ECS:ENTITY)
            :Y
            (AREF
             (THE (SIMPLE-ARRAY SINGLE-FLOAT)
                  (%POSITION-SOA-Y CL-FAST-ECS::SOA))
             CL-FAST-ECS:ENTITY))
      STREAM)))
 NIL
 (DEFUN POSITION-COUNT ()
   (LET* ((CL-FAST-ECS::COMPONENT-STORAGES
           (CL-FAST-ECS::STORAGE-COMPONENT-STORAGES CL-FAST-ECS:*STORAGE*))
          (CL-FAST-ECS::SOA
           (SVREF CL-FAST-ECS::COMPONENT-STORAGES
                  CL-FAST-ECS::+POSITION-COMPONENT-INDEX+)))
     (CL-FAST-ECS::COMPONENT-SOA-COUNT CL-FAST-ECS::SOA)))
 'POSITION) 
#+end_example

** –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
[[https://youtu.be/oPn5oBMECfY][Benchmarking cl-fast-ecs performance]]

[[file:img/benchmark.png]]

#+begin_src lisp :results output :session demo
  (disassemble (rest (assoc :move ecs::*system-registry*)))
#+end_src

#+RESULTS:
#+begin_example
; disassembly for (FLET MOVE-SYSTEMG518)
; Size: 185 bytes. Origin: #x55457206                         ; (FLET MOVE-SYSTEMG518)
; 06:       8B0C255444AF50   MOV ECX, [#x50AF4454]            ; tls_index: CL-FAST-ECS:*STORAGE*
; 0D:       4A8B0C29         MOV RCX, [RCX+R13]
; 11:       4883F9FF         CMP RCX, -1
; 15:       480F440C256044AF50 CMOVEQ RCX, [#x50AF4460]       ; CL-FAST-ECS:*STORAGE*
; 1E:       488B4125         MOV RAX, [RCX+37]
; 22:       488B4809         MOV RCX, [RAX+9]
; 26:       488B7935         MOV RDI, [RCX+53]
; 2A:       488B713D         MOV RSI, [RCX+61]
; 2E:       488B4011         MOV RAX, [RAX+17]
; 32:       4C8B5035         MOV R10, [RAX+53]
; 36:       4C8B583D         MOV R11, [RAX+61]
; 3A:       498B41F9         MOV RAX, [R9-7]
; 3E:       4C8B4BF9         MOV R9, [RBX-7]
; 42:       488BD8           MOV RBX, RAX
; 45:       EB2F             JMP L2
; 47:       660F1F840000000000 NOP
; 50: L0:   498B48F9         MOV RCX, [R8-7]
; 54:       488BD3           MOV RDX, RBX
; 57:       48D1FA           SAR RDX, 1
; 5A:       488BC2           MOV RAX, RDX
; 5D:       48C1E806         SHR RAX, 6
; 61:       488B44C101       MOV RAX, [RCX+RAX*8+1]
; 66:       480FA3D0         BT RAX, RDX
; 6A:       7217             JB L3
; 6C: L1:   488BCB           MOV RCX, RBX
; 6F:       4883C102         ADD RCX, 2
; 73:       488BD9           MOV RBX, RCX
; 76: L2:   4C39CB           CMP RBX, R9
; 79:       7ED5             JLE L0
; 7B:       BA17010050       MOV EDX, #x50000117              ; NIL
; 80:       C9               LEAVE
; 81:       F8               CLC
; 82:       C3               RET
; 83: L3:   488BC3           MOV RAX, RBX
; 86:       488BCB           MOV RCX, RBX
; 89:       F3410F104C4A01   MOVSS XMM1, [R10+RCX*2+1]
; 90:       F30F10544701     MOVSS XMM2, [RDI+RAX*2+1]
; 96:       F30F58D1         ADDSS XMM2, XMM1
; 9A:       F30F11544701     MOVSS [RDI+RAX*2+1], XMM2
; A0:       488BC3           MOV RAX, RBX
; A3:       488BCB           MOV RCX, RBX
; A6:       F3410F104C4B01   MOVSS XMM1, [R11+RCX*2+1]
; AD:       F30F10544601     MOVSS XMM2, [RSI+RAX*2+1]
; B3:       F30F58D1         ADDSS XMM2, XMM1
; B7:       F30F11544601     MOVSS [RSI+RAX*2+1], XMM2
; BD:       EBAD             JMP L1
#+end_example

** –ò–ò: –¥–µ—Ä–µ–≤—å—è –ø–æ–≤–µ–¥–µ–Ω–∏—è
[[https://gitlab.com/lockie/cl-fast-behavior-trees][cl-fast-behavior-trees]]

#+begin_src lisp :results output :session demo-trees
  (ql:quickload :cl-fast-behavior-trees)

  (fbt:define-behavior-tree/debug test
      ((repeat :name "root")
       ((fallback :name "fall")
        ((sequence :name "seq")
         ((always-true :name "node1"))
         (parallel
          ((always-false :name "node2"))
          ((always-false :name "node3"))))
        ((always-false :name "node4"))
        ((always-true :name "node5")))))

  (ecs:bind-storage)

  (make-test-behavior-tree (ecs:make-entity))

  (dotimes (_ 8) (ecs:run-systems) (format t "---~%"))

  (fbt:dump-behavior-tree/picture 0 "/tmp/tree.png")
#+end_src

[[file:/tmp/tree.png]]

** –ü—Ä–∏–º–µ—Ä—ã –¥–µ—Ä–µ–≤—å–µ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è
[[file:img/offensive-tree.png]]

[[file:img/peasant-tree.png]]

** –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
+ –ü–∏—Å–∞—Ç—å –∏–≥—Ä—ã –Ω–∞ –ª–∏—Å–ø–∞—Ö ‚Äî –∫–∞–π—Ñ üòä
+ –ï—Å—Ç—å [[https://github.com/lockie/cookiecutter-lisp-game][–≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω]] –¥–ª—è Common Lisp, [[https://gitlab.com/lockie/cl-fast-ecs][ECS-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫]] –∏ [[https://habr.com/ru/articles/767342][—Å–µ—Ä–∏—è —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–≤]].
+ –í —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –ø–ª–∞–Ω–∞—Ö ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ 2D –¥–≤–∏–∂–∫–∞.
+ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª [[https://t.me/lisp_exile][t.me/lisp_exile]], —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!
