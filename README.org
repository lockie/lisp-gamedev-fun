* –ü–∏—Å–∞—Ç—å –∏–≥—Ä—ã –Ω–∞ Lisp ‚Äì –∫–∞–π—Ñ–æ–≤–æ!
** –û–± –∞–≤—Ç–æ—Ä–µ
[[file:img/author.jpg]]

*–ê–Ω–¥—Ä–µ–π –ö—Ä–∞–≤—á—É–∫*

+ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –∞–≤—Ç–æ—Ä –∫—É—Ä—Å–æ–≤ –≤ Otus
+ UNIX-–≥–∏–∫ –∏ Lisp-—Ñ–∞–Ω–∞—Ç–∏–∫ üòÖ
+ –ü–∏—Å–∞–ª –Ω–∞ Common Lisp –∑–∞ –¥–µ–Ω—å–≥–∏
+ –í —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ—Ç —Ä–∞–±–æ—Ç—ã –≤—Ä–µ–º—è –¥–µ–ª–∞—é –Ω–∞ –Ω—ë–º –≤–∏–¥–µ–æ–∏–≥—Ä—ã

** –ú–æ–π –ø—É—Ç—å –≤ –≥–µ–π–º–¥–µ–≤–µ –Ω–∞ Lisp
*** 2018. SICP
[[https://github.com/lockie/sicp-exercises][sicp-exercises]]

[[file:img/sicp.jpg]]

*** 2019. Spring Lisp Game Jam '19
[[https://awkravchuk.itch.io/darkness-looming][Darkness Looming]] (Racket, SDL2)
#15/17

[[file:img/dl.png]]

*** 2019. racket-sdl2
[[https://github.com/lockie/racket-sdl2][racket-sdl2]]

[[file:img/racket-sdl2.png]]

*** 2019. GMTK Game Jam '19
[[https://awkravchuk.itch.io/backpackless][Backpackless]] (Fennel, L√ñVE2D)
#885/2553

[[file:img/backpackless.png]]

*** 2019. d2clone-kit
[[https://gitlab.com/lockie/d2clone-kit][d2clone-kit]] (Common Lisp, liballegro)

[[file:img/d2clone.png]]

*** 2020. Spring Lisp Game Jam '20
[[https://awkravchuk.itch.io/darkness-looming-the-dawn][Darkness Looming: The Dawn]]
#6/21

[[file:img/dl-dawn.png]]

*** 2020. Twitch
[[https://twitch.tv/awkravchuk][twitch.tv/awkravchuk]]

[[file:img/stream.png]]

*** 2020. GMTK Game Jam '20
[[https://awkravchuk.itch.io/magegement][Magegement]] (Fennel, Amulet)
#3119/5268

[[file:img/magegement.png]]

*** 2021. docker-lisp-gamedev
[[https://gitlab.com/lockie/docker-lisp-gamedev][docker-lisp-gamedev]]

*** 2023. cl-fast-ecs
[[https://gitlab.com/lockie/cl-fast-ecs][cl-fast-ecs]] (Common Lisp)

[[file:img/cl-fast-ecs.png]]

*** 2023. Spring Lisp Game Jam '23
[[https://awkravchuk.itch.io/thoughtbound][Thoughtbound]] (Common Lisp, liballegro)
#13/29

[[file:img/thoughtbound.png]]

*** 2023. Autumn Lisp Game Jam '23
[[https://awkravchuk.itch.io/mana-break][Mana Break]] (Common Lisp, liballegro)
#6/16

[[file:img/mana-break.png]]

*** 2024. Spring Lisp Game Jam '24
[[https://awkravchuk.itch.io/cycle-of-evil][Cycle of Evil]] (Common Lisp, liballegro)
#26/48

[[file:img/cycle-of-evil.png]]

** –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
+ Diablo 2 üòä
+ Quake
+ Shinmera's [[https://kandria.com][Kandria]] & [[https://github.com/Shirakumo/trial][Trial game engine]]

[[file:img/kandria.png]]

** –ü–æ—á–µ–º—É Common Lisp?
[[file:img/logo.png]]

[[https://habr.com/ru/articles/737316][–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–¥–∏–Ω–∞–º–∏—á–Ω–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏]]

+ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  + –∫–æ–º–ø–∏–ª—è—Ü–∏—è –≤ –Ω–∞—Ç–∏–≤–Ω—ã–π –∫–æ–¥
  + —Ñ—É–Ω–∫—Ü–∏—è ~disassemble~
  + –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ ~declare~
  + –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
+ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å
  + [[https://github.com/cffi/cffi][CFFI]]
  + –Ω–µ–≥–∏–≥–∏–µ–Ω–∏—á–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã
+ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏
  + –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ([[https://github.com/cbaggers/livesupport][livesupport]])
  + –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

** –ü–æ—á–µ–º—É liballegro?
+ –Ω–∞—á–∞–ª —Å SDL2
+ GUI: [[https://github.com/Immediate-Mode-UI/Nuklear][Nuklear]]
+ SDL2-–±—ç–∫–µ–Ω–¥ Nuklear [[https://github.com/Immediate-Mode-UI/Nuklear/blob/1e4eacca2e3e4abd4d8b793c580c71f2e5315651/demo/sdl_opengl2/nuklear_sdl_gl2.h#L66][–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª]] "—Å—ã—Ä—ãe" OpenGL –≤—ã–∑–æ–≤—ã
+ [[https://stackoverflow.com/a/41091998/1336774][–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ]] –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ API SDL2 –≤—Ä–æ–¥–µ =SDL_RenderCopy= –∏ —Å—ã—Ä–æ–π OpenGL
+ –ë—ç–∫–µ–Ω–¥—ã Nuklear: SDL2, SFML, [[https://liballeg.org][liballegro]]
+ Common Lisp-–±–∏–Ω–¥–∏–Ω–≥: [[https://github.com/resttime/cl-liballegro][cl-liballegro]]
+ [[https://gitlab.com/lockie/cl-liballegro-nuklear][cl-liballegro-nuklear]]
+ –ê –¥–≤–∞ –≥–æ–¥–∞ —Å–ø—É—Å—Ç—è [[https://github.com/Immediate-Mode-UI/Nuklear/tree/master/demo/sdl_renderer][–ø–æ—è–≤–∏–ª—Å—è]] –±—ç–∫—ç–Ω–¥ Nuklear —Å –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º–∏ API SDL2 üòÖ

** –° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?
+ [[https://lispgames.github.io][Lisp Games Wiki]]
+ [[https://github.com/lockie/cookiecutter-lisp-game][cookiecutter-lisp-game]]
+ [[https://mapeditor.org][Tiled]] & [[https://github.com/Zulu-Inuoe/cl-tiled][cl-tiled]]
+ [[https://aseprite.org][Aseprite]] & [[https://gitlab.com/lockie/cl-aseprite][cl-aseprite]]
+ [[https://habr.com/ru/articles/767342][–ì–µ–π–º–¥–µ–≤ –Ω–∞ Lisp. –ß–∞—Å—Ç—å 1: ECS –∏ –º–µ—Ç–∞–ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è]]

** –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω Entity-Component-System
[[https://youtu.be/rX0ItVEVjHc][Data-oriented design]]

+ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∫–æ–¥–∞
+ –≥–∏–±–∫–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤
+ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ —Å—á—ë—Ç —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–µ–π CPU

** –ö—ç—à–∏ CPU
[[file:img/cpu-mem-gap.png]]
–ò—Å—Ç–æ—á–Ω–∏–∫: [[https://aras-p.info/texts/files/2018Academy%20-%20ECS-DoD.pdf][Aras Pranckeviƒçius, Entity Component Systems & Data Oriented Design]]

** SoA
Array of structures ‚ü∂ Structure of arrays

#+begin_src lisp
  (defstruct pos
    (x 0.0 :type single-float)
    (y 0.0 :type single-float))

  (setf positions (make-array 100 :element-type 'pos))

  (loop :with sum-x := 0.0
        :with sum-y := 0.0
        :for entity :from 0 :below 100
        :for p := (aref positions entity)
        :for x := (pos-x p)
        :for y := (pos-y p)
        :do ;; something with x & y
        (incf sum-x x)
        (incf sum-y y))
#+end_src

[[file:img/aos.png]]
–ò—Å—Ç–æ—á–Ω–∏–∫: [[https://github.com/SanderMertens/flecs_not_for_dummies][Sander Mertens, Flecs (not for dummies)]]

#+begin_src lisp
  (defstruct positions
    (x (make-array 100 :element-type 'single-float))
    (y (make-array 100 :element-type 'single-float)))

  (setf positions (make-positions))

  (loop :with sum-x := 0
        :with sum-y := 0
        :with xs := (positions-x positions)
        :with ys := (positions-y positions)
        :for entity :from 0 :below 100
        :for x := (aref xs entity)
        :for y := (aref ys entity)
        :do ;; something with x & y
        (incf sum-x x)
        (incf sum-y y))
#+end_src

[[file:img/soa.png]]
–ò—Å—Ç–æ—á–Ω–∏–∫: [[https://github.com/SanderMertens/flecs_not_for_dummies][Sander Mertens, Flecs (not for dummies)]]

** ECS

[[file:img/ecs.png]]
–ò—Å—Ç–æ—á–Ω–∏–∫: [[https://habr.com/ru/companies/pixonic/articles/413729][–ö–∞–∫ –∏ –ø–æ—á–µ–º—É –º—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–≤–æ–π ECS]]

** ECS: –ø—Ä–∏–º–µ—Ä
[[file:img/entities.png]]

** cl-fast-ecs
[[https://awkravchuk.itch.io/cl-fast-ecs][Blazingly fast Entity-Component-System microframework ‚ö°üì¶]]

#+begin_src lisp :results output :session demo
  (declaim (optimize (speed 3) (debug 0) (safety 0) (compilation-speed 0)))

  (ql:quickload :cl-fast-ecs)

  (ecs:defcomponent position
    "Location information"
    (x 0.0 :type single-float :documentation "X coordinate")
    (y 0.0 :type single-float :documentation "Y coordinate"))

  (ecs:defcomponent velocity
    (x 0.0 :type single-float)
    (y 0.0 :type single-float))

  (ecs:defsystem move
    (:components-ro (velocity)
     :components-rw (position))
    "Moves objects according to their velocity."
    (incf position-x velocity-x)
    (incf position-y velocity-y))

  (ecs:defsystem print
    (:components-ro (position))
    (format t "entity ~a: (~a, ~a)~%" entity position-x position-y))

  (ecs:bind-storage)

  (let ((entity0 (ecs:make-entity)))
    (make-position entity0 :x 0.0 :y 0.0)
    (make-velocity entity0 :x 0.5 :y 0.5)
    (ecs:make-object '((:position :x 1.0 :y 1.0)
                       (:velocity :x 0.1 :y 0.1)))
    (dotimes (i 3)
      (ecs:run-systems)))
#+end_src

** ECS: –ø—Ä–∏–º–µ—Ä
#+begin_src lisp
  (ecs:defsystem render-map-tiles
    (:components-ro (position size image map-tile)
     :initially (al:hold-bitmap-drawing t)
     :finally (al:hold-bitmap-drawing nil))
    (al:draw-scaled-bitmap image-bitmap
                           0.0 0.0
                           size-width size-height
                           position-x position-y
                           (* +scale-factor+ size-width)
                           (* +scale-factor+ size-height)
                           0))
#+end_src

#+begin_src lisp
  (ecs:defsystem update-sprites
    (:components-ro (animation-sequence)
     :components-rw (animation-state)
     :arguments ((:dt single-float)))
    (incf animation-state-time dt)
    (when (> animation-state-time animation-sequence-frame-duration)
      (multiple-value-bind (nframes rest-time)
          (floor animation-state-time animation-sequence-frame-duration)
        (declare (type non-negative-fixnum nframes))
        (setf animation-state-time rest-time)
        (multiple-value-bind (repeat frame)
            (truncate (+ animation-state-frame nframes) animation-sequence-frames)
          (setf animation-state-frame (cond
                                        ((zerop repeat)
                                         frame)
                                        ((zerop animation-sequence-repeat)
                                         (setf animation-state-finished 1)
                                         (1- animation-sequence-frames))
                                        (t
                                         frame)))))))
#+end_src

** –ú–µ—Ç–∞–ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è
#+begin_src lisp :results output :session demo
  (print
   (macroexpand-1
    '(ecs:defcomponent position
      "Location information"
      (x 0.0 :type single-float :documentation "X coordinate")
      (y 0.0 :type single-float :documentation "Y coordinate"))))
#+end_src

** –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
[[https://youtu.be/oPn5oBMECfY][Benchmarking cl-fast-ecs performance]]

[[file:img/benchmark.png]]

#+begin_src lisp :results output :session demo
  (disassemble (rest (assoc :move ecs::*system-registry*)))
#+end_src

** –ò–ò: –¥–µ—Ä–µ–≤—å—è –ø–æ–≤–µ–¥–µ–Ω–∏—è
[[https://gitlab.com/lockie/cl-fast-behavior-trees][cl-fast-behavior-trees]]

#+begin_src lisp :results output :session demo-trees
  (ql:quickload :cl-fast-behavior-trees)

  (fbt:define-behavior-tree/debug test
      ((repeat :name "root")
       ((fallback :name "fall")
        ((sequence :name "seq")
         ((always-true :name "node1"))
         (parallel
          ((always-false :name "node2"))
          ((always-false :name "node3"))))
        ((always-false :name "node4"))
        ((always-true :name "node5")))))

  (ecs:bind-storage)

  (make-test-behavior-tree (ecs:make-entity))

  (dotimes (_ 8) (ecs:run-systems) (format t "---~%"))

  (fbt:dump-behavior-tree/picture 0 "/tmp/tree.png")
#+end_src

[[file:/tmp/tree.png]]

** –ü—Ä–∏–º–µ—Ä—ã –¥–µ—Ä–µ–≤—å–µ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è
[[file:img/offensive-tree.png]]

[[file:img/peasant-tree.png]]

** –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
+ –ü–∏—Å–∞—Ç—å –∏–≥—Ä—ã –Ω–∞ –ª–∏—Å–ø–∞—Ö ‚Äî –∫–∞–π—Ñ üòä
+ –ï—Å—Ç—å [[https://github.com/lockie/cookiecutter-lisp-game][–≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω]] –¥–ª—è Common Lisp, [[https://gitlab.com/lockie/cl-fast-ecs][ECS-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫]] –∏ [[https://habr.com/ru/articles/767342][—Å–µ—Ä–∏—è —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–≤]].
+ –í —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –ø–ª–∞–Ω–∞—Ö ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ 2D –¥–≤–∏–∂–∫–∞.
+ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª [[https://t.me/lisp_exile][t.me/lisp_exile]], —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!
